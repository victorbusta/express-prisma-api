// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @unique @db.VarChar(255)
  users User[]
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  name                String
  adresse             String
  password            String
  createdAt           DateTime            @default(now())
  deletedDate         DateTime?
  role                Role                @relation(fields: [roleId], references: [id])
  roleId              Int
  machines            Machine[]
  components          Component[]
  machines_components Machine_Component[]
  comments            Comment[]
  documents           Document[]
  articles            Article[]
}

model ArticleType {
  id       Int       @id @default(autoincrement())
  type     String
  articles Article[]
}

model Article {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  articleType   ArticleType @relation(fields: [articleTypeId], references: [id])
  articleTypeId Int
  machine       Machine?    @relation(fields: [machineId], references: [id])
  machineId     Int?
  component     Component?  @relation(fields: [componentId], references: [id])
  componentId   Int?
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  comments      Comment[]
  documents     Document[]
}

model Document {
  id          Int        @id @default(autoincrement())
  name        String
  format      String
  url         String
  machine     Machine?   @relation(fields: [machineId], references: [id])
  machineId   Int
  component   Component? @relation(fields: [componentId], references: [id])
  componentId Int
  article     Article?   @relation(fields: [articleId], references: [id])
  articleId   Int
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  createdAt   DateTime  @default(now())
  deletedDate DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  article     Article   @relation(fields: [articleId], references: [id])
  articleId   Int
}

model Machine {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  description         String
  price               String
  addedAt             DateTime            @default(now())
  creationDate        DateTime?
  discontinuationDate DateTime?
  user                User                @relation(fields: [userId], references: [id])
  userId              Int
  machines_components Machine_Component[]
  articles            Article[]
  documents           Document[]
}

model Component {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  description         String
  price               String
  addedAt             DateTime            @default(now())
  creationDate        DateTime?
  discontinuationDate DateTime?
  user                User                @relation(fields: [userId], references: [id])
  userId              Int
  machines_components Machine_Component[]
  articles            Article[]
  documents           Document[]
}

model Machine_Component {
  machine     Machine   @relation(fields: [machineId], references: [id])
  machineId   Int
  component   Component @relation(fields: [componentId], references: [id])
  componentId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  assigneddAt DateTime  @default(now())

  @@id([machineId, componentId, userId])
}
